{"meta":{"title":"Tailyou's Blog","subtitle":"不积小流，无以成江海","description":null,"author":"Tailyou/祝文飞","url":"http://yoursite.com"},"pages":[{"title":"关于","date":"2017-06-01T02:21:18.000Z","updated":"2017-06-01T02:23:32.539Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"【文件下载&网络请求库-OkRetrofit】","slug":"文件下载&网络请求库-OkRetrofit","date":"2017-04-16T00:14:43.000Z","updated":"2017-06-01T05:43:35.156Z","comments":true,"path":"2017/04/16/文件下载&网络请求库-OkRetrofit/","link":"","permalink":"http://yoursite.com/2017/04/16/文件下载&网络请求库-OkRetrofit/","excerpt":"","text":"一、概述Retrofit+RxJava是当前最流行的Android网络交互解决方案。OkRetrofit是一个基于Retrofit2+RxJava2封装的文件下载和网络请求库，其中文件下载部分参考了RxDownload，去掉了RxPermission相关的代码，网络请求部分做了适当的抽象和封装，方便使用的同时也不影响相关部分的定制。 1.1 文件下载 智能判断服务器是否支持断点续传并适配相应下载方式； 智能判断同一地址对应的文件在服务端是否有改变并重新下载； 支持多线程下载，可设置下载线程数； 支持下载状态、下载进度监听； 支持在Service中下载文件，内置DownloadService； 1.2 网络请求 内置BaseRetrofit,提供了抽象方法initOkHttp供上层实现，可在此方法中配置日志、缓存、超时等； 内置服务器统一返回HttpResponse和请求异常HttpException； 内置统一线程处理和统一返回结果转换方法； 二、使用2.1 GradleOkRetrofit已上传到jcenter，在gradle中直接引用即可。 123dependencies &#123; compile 'com.hengda.zwf:OkRetrofit:0.0.1'&#125; 2.2 文件下载12345678910111213141516171819202122232425262728RxDownload.getInstance().context(MainActivity.this) .maxThread(4).maxRetryCount(3) .download(url, saveName, savePath) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .doOnSubscribe(disposable -&gt; &#123; compositeDisposable.add(disposable); tvDownloadStatus.setText(\"下载地址：\" + url + \"\\n\"); SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy年MM月dd日HH时mm分ss秒\"); tvDownloadStatus.setText(tvDownloadStatus.getText() + \"\\n开始下载：\" + sdf.format(new Date())); &#125;) .doOnNext(downloadStatus -&gt; &#123; //此处更新下载进度 String formatStatusString = downloadStatus.getFormatStatusString(); tvDownloadPrg.setText(\"下载进度：\" + formatStatusString); &#125;) .doOnError(throwable -&gt; &#123; //此处处理下载异常 tvDownloadStatus.setText(\"下载失败:\" + throwable.getMessage()); &#125;) .doOnComplete(() -&gt; &#123; //下载完成，解压或安装 SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy年MM月dd日HH时mm分ss秒\"); tvDownloadPrg.setText(tvDownloadPrg.getText() + \"\\n下载完成：\" + sdf.format(new Date())); File file = new File(savePath, saveName); file.delete(); &#125;) .subscribe(); 2.3 网络请求2.3.1 新建声明网络请求方法的接口 123456public interface HttpApis &#123; @GET(\"index.php?g=mapi&amp;m=appdatas&amp;a=datas\") Observable&lt;HttpResponse&lt;DataBean&gt;&gt; loadDatas();&#125; 2.3.2 继承BaseRetrofit，实现initOkHttp方法，在此方法中可配置超时、日志、缓存等。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263public class RetrofitHelper extends BaseRetrofit &#123; private static HttpApis httpApis = null; private volatile static RetrofitHelper instance; /** * 单例模式 * * @author 祝文飞（Tailyou） * @time 2016/11/12 11:31 */ private RetrofitHelper() &#123; super(); httpApis = getApiService(setupBaseHttpUrl(), HttpApis.class); &#125; /** * 组装网络请求基地址 * * @author 祝文飞（Tailyou） * @time 2016/11/12 11:38 */ public static String setupBaseHttpUrl() &#123; return \"http://\" + HdAppConfig.getDefaultIpPort() + \"/hnbwy/\"; &#125; /** * 获取实例-单例 * * @author 祝文飞（Tailyou） * @time 2016/11/12 11:32 */ public static RetrofitHelper getInstance() &#123; if (instance == null) &#123; synchronized (RetrofitHelper.class) &#123; if (instance == null) &#123; instance = new RetrofitHelper(); &#125; &#125; &#125; return instance; &#125; /** * 在此配置超时，缓存，日志等 * * @author 祝文飞（Tailyou） * @time 2017/5/10 11:10 */ @Override public OkHttpClient initOkHttp() &#123; OkHttpClient.Builder builder = new OkHttpClient.Builder(); builder.connectTimeout(10, TimeUnit.SECONDS); builder.writeTimeout(20, TimeUnit.SECONDS); builder.readTimeout(20, TimeUnit.SECONDS); builder.retryOnConnectionFailure(true); return builder.build(); &#125; /** * 获取数据 * * @author 祝文飞（Tailyou） * @time 2017/1/3 11:57 */ public Observable&lt;DataBean&gt; loadDatas() &#123; return httpApis.loadDatas().compose(rxSchedulerHelper()).compose(handleResult()); &#125;&#125; 2.3.3 使用 123456RetrofitHelper.getInstance() .loadDatas() .doOnSubscribe(disposable -&gt; compositeDisposable.add(disposable)) .doOnNext(dataBean -&gt; Toast.makeText(MainActivity.this, new Gson().toJson(dataBean), Toast.LENGTH_SHORT).show()) .doOnError(throwable -&gt; Logger.e(throwable.getMessage())) .subscribe(); 详细用法参见Demo，地址：https://github.com/Tailyou/OkRetrofit","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}],"tags":[{"name":"Retrofit","slug":"Retrofit","permalink":"http://yoursite.com/tags/Retrofit/"},{"name":"文件下载","slug":"文件下载","permalink":"http://yoursite.com/tags/文件下载/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}]},{"title":"【移动支付框架-AndroidPay】","slug":"移动支付框架-AndroidPay","date":"2017-03-20T11:36:45.000Z","updated":"2017-06-01T05:47:59.221Z","comments":true,"path":"2017/03/20/移动支付框架-AndroidPay/","link":"","permalink":"http://yoursite.com/2017/03/20/移动支付框架-AndroidPay/","excerpt":"","text":"一、概述移动支付框架，封装了微信支付、支付宝支付，两种支付方式保持了统一的使用风格，使用方便。 二、版本最新版本0.0.1，compile ‘com.hengda.zwf:AndroidPay:0.0.1’ 三、使用1、修改AndroidManifest.xml123456789&lt;activity android:name=&quot;com.hengda.zwf.androidpay.WXPayCallbackActivity&quot; android:configChanges=&quot;orientation|keyboardHidden|navigation|screenSize&quot; android:launchMode=&quot;singleTop&quot; android:theme=&quot;@android:style/Theme.Translucent.NoTitleBar&quot; /&gt;&lt;activity-alias android:name=&quot;.wxapi.WXPayEntryActivity&quot; android:exported=&quot;true&quot; android:targetActivity=&quot;com.hengda.zwf.androidpay.WXPayCallbackActivity&quot; /&gt; 2、微信支付1234567891011121314151617181920212223242526272829303132333435/** * 微信支付 * * @author 祝文飞（Tailyou） * @time 2017/3/20 10:13 */ public void doWxpay(View view) &#123; String payParam = &quot;&quot;;//pay param form server WechatPay.getInstance(this, &quot;wxff989c97f26783b1&quot;).doPay(payParam, new WechatPay.WXPayResultCallBack() &#123; @Override public void onSuccess() &#123; Toast.makeText(getApplication(), &quot;支付成功&quot;, Toast.LENGTH_SHORT).show(); &#125; @Override public void onError(int error_code) &#123; switch (error_code) &#123; case WechatPay.NO_OR_LOW_WX: Toast.makeText(getApplication(), &quot;未安装微信或微信版本过低&quot;, Toast.LENGTH_SHORT).show(); break; case WechatPay.ERROR_PAY_PARAM: Toast.makeText(getApplication(), &quot;参数错误&quot;, Toast.LENGTH_SHORT).show(); break; case WechatPay.ERROR_PAY: Toast.makeText(getApplication(), &quot;支付失败&quot;, Toast.LENGTH_SHORT).show(); break; &#125; &#125; @Override public void onCancel() &#123; Toast.makeText(getApplication(), &quot;支付取消&quot;, Toast.LENGTH_SHORT).show(); &#125; &#125;); &#125; 3、支付宝支付1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * 支付宝支付 * * @author 祝文飞（Tailyou） * @time 2017/3/20 10:13 */ public void doAlipay(View view) &#123; //pay param form server String payParam = &quot;pay param form server&quot;; Alipay.getInstance(this).doPay(payParam, new Alipay.AlipayResultCallBack() &#123; @Override public void onSuccess() &#123; Toast.makeText(getApplication(), &quot;支付成功&quot;, Toast.LENGTH_SHORT).show(); &#125; @Override public void onDealing() &#123; Toast.makeText(getApplication(), &quot;支付处理中...&quot;, Toast.LENGTH_SHORT).show(); &#125; @Override public void onError(int error_code) &#123; switch (error_code) &#123; case Alipay.ERROR_RESULT: Toast.makeText(getApplication(), &quot;支付失败:支付结果解析错误&quot;, Toast.LENGTH_SHORT).show(); break; case Alipay.ERROR_NETWORK: Toast.makeText(getApplication(), &quot;支付失败:网络连接错误&quot;, Toast.LENGTH_SHORT).show(); break; case Alipay.ERROR_PAY: Toast.makeText(getApplication(), &quot;支付错误:支付码支付失败&quot;, Toast.LENGTH_SHORT).show(); break; default: Toast.makeText(getApplication(), &quot;支付错误&quot;, Toast.LENGTH_SHORT).show(); break; &#125; &#125; @Override public void onCancel() &#123; Toast.makeText(getApplication(), &quot;支付取消&quot;, Toast.LENGTH_SHORT).show(); &#125; &#125;); &#125; 四、使用具体使用见demo。项目地址：https://git.oschina.net/tailyou/HD_Frame_AndroidPay","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}],"tags":[{"name":"支付","slug":"支付","permalink":"http://yoursite.com/tags/支付/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}]},{"title":"【通用提示弹框-OkDialog】","slug":"通用提示弹框-OkDialog","date":"2017-03-17T00:14:05.000Z","updated":"2017-06-01T05:57:59.749Z","comments":true,"path":"2017/03/17/通用提示弹框-OkDialog/","link":"","permalink":"http://yoursite.com/2017/03/17/通用提示弹框-OkDialog/","excerpt":"","text":"一、概述通用Dialog，适用于ProgressDialog，BuilderDialog，可以设置字体、进入退出动画，同时兼容手机和导览机。 二、版本OkDialog已上传jcenter，直接在gradle中添加依赖即可。compile ‘com.hengda.zwf:OkDialog:0.0.1’ 三、效果1、ProgressDialog补间动画 2、ProgressDialog帧动画 3、BuilderDialog默认布局 4、BuilderDialog自定义布局 四、使用此处以BuilderDialog自定义布局为例，简单介绍说使用，具体用法参见demo。地址：https://github.com/Tailyou/OkDialog 123456789101112131415161718192021222324/** * 该方法通过提取文字参数和点击事件可以继续封装 * * @author 祝文飞（Tailyou） * @time 2017/2/6 9:37 */private void showCustomDlg() &#123; HDialogBuilder hDialogBuilder = new HDialogBuilder(mContext); View customView = View.inflate(mContext, R.layout.dialog_custom_view_all, null); TextView tvTitle = HdTool.getView(customView, R.id.tvTitle); TextView tvMsg = HdTool.getView(customView, R.id.tvMsg); TextView btnYes = HdTool.getView(customView, R.id.btnYes); TextView btnNo = HdTool.getView(customView, R.id.btnNo); tvTitle.setText(\"注销\"); tvMsg.setText(\"退出账号可能会使连续登录记录归零，确定退出？\"); btnYes.setText(\"确定退出\"); btnNo.setText(\"取消\"); btnYes.setOnClickListener(v -&gt; hDialogBuilder.dismiss()); btnNo.setOnClickListener(v -&gt; hDialogBuilder.dismiss()); hDialogBuilder.setCustomView(customView) .dlgColor(Color.TRANSPARENT) .cancelable(false) .show();&#125; 封装后: 12345678910111213141516171819private void showCustomDlg(String title, String msg, String txtYes, String txtNo, DialogClickListener dialogClickListener) &#123; hDialogBuilder = new HDialogBuilder(mContext); View customView = View.inflate(mContext, R.layout.dialog_custom_view_all, null); TextView tvTitle = HdTool.getView(customView, R.id.tvTitle); TextView tvMsg = HdTool.getView(customView, R.id.tvMsg); TextView btnYes = HdTool.getView(customView, R.id.btnYes); TextView btnNo = HdTool.getView(customView, R.id.btnNo); tvTitle.setText(title); tvMsg.setText(msg); btnYes.setText(txtYes); btnNo.setText(txtNo); btnYes.setOnClickListener(v -&gt; dialogClickListener.p()); btnNo.setOnClickListener(v -&gt; dialogClickListener.n()); hDialogBuilder.setCustomView(customView) .dlgColor(Color.TRANSPARENT) .cancelable(false) .show();&#125; 封装好之后，可以写到工具类中供直接调用. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** * 作者：Tailyou （祝文飞） * 时间：2016/5/26 19:03 * 邮箱：tailyou@163.com * 描述：Dialog工具类 */public class DialogCenter &#123; private static HDialogBuilder hDialogBuilder; /** * 封装好的方法可以写到DialogCenter工具类中，供直接调用 * * @author 祝文飞（Tailyou） * @time 2017/2/6 9:39 */ public static void showCustomDlg(Context mContext, String title, String msg, String txtYes, String txtNo, DialogClickListener dialogClickListener) &#123; hideDialog(); hDialogBuilder = new HDialogBuilder(mContext); View customView = View.inflate(mContext, R.layout.dialog_custom_view_all, null); TextView tvTitle = HdTool.getView(customView, R.id.tvTitle); TextView tvMsg = HdTool.getView(customView, R.id.tvMsg); TextView btnYes = HdTool.getView(customView, R.id.btnYes); TextView btnNo = HdTool.getView(customView, R.id.btnNo); tvTitle.setText(title); tvMsg.setText(msg); btnYes.setText(txtYes); btnNo.setText(txtNo); btnYes.setOnClickListener(v -&gt; dialogClickListener.p()); btnNo.setOnClickListener(v -&gt; dialogClickListener.n()); hDialogBuilder.setCustomView(customView) .dlgColor(Color.TRANSPARENT) .cancelable(false) .show(); &#125; /** * 隐藏Dialog */ public static void hideDialog() &#123; if (hDialogBuilder != null) &#123; hDialogBuilder.dismiss(); hDialogBuilder = null; &#125; &#125;&#125;","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}],"tags":[{"name":"Dialog","slug":"Dialog","permalink":"http://yoursite.com/tags/Dialog/"},{"name":"ProgressDialog","slug":"ProgressDialog","permalink":"http://yoursite.com/tags/ProgressDialog/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}]},{"title":"【通用数据适配器-OkAdapter】","slug":"通用数据适配器-OkAdapter","date":"2017-03-17T00:13:19.000Z","updated":"2017-06-01T05:37:43.612Z","comments":true,"path":"2017/03/17/通用数据适配器-OkAdapter/","link":"","permalink":"http://yoursite.com/2017/03/17/通用数据适配器-OkAdapter/","excerpt":"","text":"一、概述通用Adapter，适用于单布局ListView、多布局ListView、单布局RecyclerView，多布局RecyclerView，带章节标题RecyclerView，GridView与ViewPage结合使用等情况。 二、版本最新版本1.0.2，直接在gradle中添加即可。compile ‘com.hengda.zwf:CommonAdapter:1.0.2’ 三、效果1、单布局ListView 2、多布局ListView 3、单布局RecyclerView 4、多布局RecyclerView 5、章节标题RecyclerView 6、GridView结合ViewPage 四、使用具体用法见demo。地址：https://git.oschina.net/tailyou/HD_Frame_CommonAdapter","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}],"tags":[{"name":"Adapter","slug":"Adapter","permalink":"http://yoursite.com/tags/Adapter/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}]}]}