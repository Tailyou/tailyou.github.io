{"meta":{"title":"Hengda Android","subtitle":"恒心所至，达有所成！","description":null,"author":"HdAndroidTeam","url":"http://yoursite.com"},"pages":[{"title":"关于","date":"2017-06-01T02:21:18.000Z","updated":"2017-06-01T02:23:32.539Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"【文件下载HttpUtil】-祝文飞","slug":"【文件下载HttpUtil】-祝文飞","date":"2017-04-16T00:14:43.000Z","updated":"2017-06-01T03:24:37.510Z","comments":true,"path":"2017/04/16/【文件下载HttpUtil】-祝文飞/","link":"","permalink":"http://yoursite.com/2017/04/16/【文件下载HttpUtil】-祝文飞/","excerpt":"","text":"OkRetrofitRetrofit+RxJava是当前最流行的Android网络交互解决方案。OkRetrofit是一个基于Retrofit2+RxJava2封装的文件下载和网络请求库，其中文件下载部分参考了RxDownload，去掉了RxPermission相关的代码，网络请求部分做了适当的抽象和封装，方便使用的同时也不影响相关部分的定制。 文件下载 智能判断服务器是否支持断点续传并适配相应下载方式； 智能判断同一地址对应的文件在服务端是否有改变并重新下载； 支持多线程下载，可设置下载线程数； 支持下载状态、下载进度监听； 支持在Service中下载文件，内置DownloadService； 网络请求 内置BaseRetrofit,提供了抽象方法initOkHttp供上层实现，可在此方法中配置日志、缓存、超时等； 内置服务器统一返回HttpResponse和请求异常HttpException； 内置统一线程处理和统一返回结果转换方法； UsageGradle123dependencies &#123; compile 'com.hengda.zwf:OkRetrofit:0.0.1'&#125; Maven123456&lt;dependency&gt; &lt;groupId&gt;com.hengda.zwf&lt;/groupId&gt; &lt;artifactId&gt;OkRetrofit&lt;/artifactId&gt; &lt;version&gt;0.0.1&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt;&lt;/dependency&gt; 文件下载123456789101112131415161718192021222324252627282930313233343536RxDownload.getInstance().context(MainActivity.this) .maxThread(4).maxRetryCount(3) .download(url, saveName, savePath) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .doOnSubscribe(new Consumer&lt;Disposable&gt;() &#123; @Override public void accept(Disposable disposable) throws Exception &#123; compositeDisposable.add(disposable); tvDownloadStatus.setText(\"下载地址：\" + url + \"\\n\"); SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy年MM月dd日HH时mm分ss秒\"); tvDownloadStatus.setText(tvDownloadStatus.getText() + \"\\n开始下载：\" + sdf.format(new Date())); &#125; &#125;) .doOnNext(new Consumer&lt;DownloadStatus&gt;() &#123; @Override public void accept(DownloadStatus downloadStatus) throws Exception &#123; tvDownloadPrg.setText(\"下载进度：\" + downloadStatus.getFormatStatusString()); &#125; &#125;) .doOnError(new Consumer&lt;Throwable&gt;() &#123; @Override public void accept(Throwable throwable) throws Exception &#123; tvDownloadStatus.setText(\"下载失败:\" + throwable.getMessage()); &#125; &#125;) .doOnComplete(new Action() &#123; @Override public void run() throws Exception &#123; SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy年MM月dd日HH时mm分ss秒\"); tvDownloadPrg.setText(tvDownloadPrg.getText() + \"\\n下载完成：\" + sdf.format(new Date())); File file = new File(savePath, saveName); file.delete(); &#125; &#125;) .subscribe(); 网络请求1、新建声明网络请求方法的接口 123456public interface HttpApis &#123; @GET(\"index.php?g=mapi&amp;m=appdatas&amp;a=datas\") Observable&lt;HttpResponse&lt;DataBean&gt;&gt; loadDatas();&#125; 2、继承BaseRetrofit，实现initOkHttp方法，在此方法中可配置超时、日志、缓存等。 123456789101112131415161718192021222324252627282930313233343536373839404142434445public class RetrofitHelper extends BaseRetrofit &#123; private static Hashtable&lt;String, RetrofitHelper&gt; retrofitHelperHashtable = new Hashtable&lt;&gt;(); private static HttpApis httpApis = null; private volatile static RetrofitHelper instance; private RetrofitHelper() &#123; super(); httpApis = getApiService(setupBaseHttpUrl(), HttpApis.class); &#125; public static RetrofitHelper getInstance() &#123; String baseUrl = setupBaseHttpUrl(); instance = retrofitHelperHashtable.get(baseUrl); if (instance == null) &#123; synchronized (RetrofitHelper.class) &#123; if (instance == null) &#123; instance = new RetrofitHelper(); retrofitHelperHashtable.clear(); retrofitHelperHashtable.put(baseUrl, instance); &#125; &#125; &#125; return instance; &#125; public static String setupBaseHttpUrl() &#123; return \"http://\" + HdAppConfig.getDefaultIpPort() + \"/hnbwy/\"; &#125; @Override public OkHttpClient initOkHttp() &#123; OkHttpClient.Builder builder = new OkHttpClient.Builder(); builder.connectTimeout(10, TimeUnit.SECONDS); builder.writeTimeout(20, TimeUnit.SECONDS); builder.readTimeout(20, TimeUnit.SECONDS); builder.retryOnConnectionFailure(true); return builder.build(); &#125; public Observable&lt;DataBean&gt; loadDatas() &#123; return httpApis.loadDatas().compose(rxSchedulerHelper()).compose(handleResult()); &#125;&#125; 3、使用 123456789101112131415161718RetrofitHelper.getInstance() .loadDatas() .doOnSubscribe(new Consumer&lt;Disposable&gt;() &#123; @Override public void accept(Disposable disposable) throws Exception &#123; compositeDisposable.add(disposable); &#125; &#125;) .subscribe(new Consumer&lt;DataBean&gt;() &#123; @Override public void accept(DataBean dataBean) throws Exception &#123; Toast.makeText(MainActivity.this, new Gson().toJson(dataBean), Toast.LENGTH_SHORT).show(); &#125; &#125;, new Consumer&lt;Throwable&gt;() &#123; @Override public void accept(Throwable throwable) throws Exception &#123; Logger.e(throwable.getMessage()); &#125; &#125;);","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}],"tags":[{"name":"Retrofit","slug":"Retrofit","permalink":"http://yoursite.com/tags/Retrofit/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}]},{"title":"【Hexo博客简要使用说明】","slug":"【Hexo博客简要使用说明】","date":"2017-03-28T02:19:05.000Z","updated":"2017-03-28T02:42:15.897Z","comments":true,"path":"2017/03/28/【Hexo博客简要使用说明】/","link":"","permalink":"http://yoursite.com/2017/03/28/【Hexo博客简要使用说明】/","excerpt":"","text":"1、博客地址http://192.168.11.46:4000 2、使用说明Hexo文件所在目录：D:\\Hexo，使用Git Bash进入到该目录下，用命令进行操作。 3、常用命令 1、new命令 1hexo new &quot;name&quot; 执行上述new命令，会在D:\\Hexo\\source_posts 文件夹下生成name.md文件，用编辑器打开编辑内容即可。 2、generate命令 执行generate命令，会将所有的md文件生成静态网页博客，生成的静态网页在D:\\Hexo\\public文件夹下。 在执行generate命令之前，先执行hexo clean命令，将上次生成的静态网页清空。 1hexo generate 3、server命令 执行server命令，启动服务 1hexo server","categories":[{"name":"文档","slug":"文档","permalink":"http://yoursite.com/categories/文档/"}],"tags":[],"keywords":[{"name":"文档","slug":"文档","permalink":"http://yoursite.com/categories/文档/"}]},{"title":"【Android平台编码规范】-AndroidTeam","slug":"【Android平台编码规范】-AndroidTeam","date":"2017-03-22T05:17:08.000Z","updated":"2017-03-22T05:22:38.565Z","comments":true,"path":"2017/03/22/【Android平台编码规范】-AndroidTeam/","link":"","permalink":"http://yoursite.com/2017/03/22/【Android平台编码规范】-AndroidTeam/","excerpt":"","text":"恒达Android平台编码规范概述为了能够更好地阅读代码，提高代码的可读性，缩短审查和修改代码过程中浪费的时间，特制订以下编码规范，包括 包名，类名，接口，方法，变量，常量，资源图片，布局文件，动画文件，控件ID，色值，自定义View等声明规范。基本原则：名词命名对象，动词命名函数。名词解释： 小驼峰命名法:除首单词外，其余所有单词的第一个字母大写; 大驼峰命名法:所有单词的第一个字母大写; 下划线命名法:单词与单词间用下划线做间隔。 版本0.0.1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2017.3.20正文1 包名基本规则：全部使用小写字母。app主包名参照：《Android版本号和包名命名规范V1.0》范 例：com.hengda.smart.shanghaighg.m 本次主要定义第六级模块名或层级名（实际开发中根据相应架构可做适当修改） 包名 说明 com.hengda.xx.xx.xx.base 基础共享的类比如BaseActivity，BaseFragment等 com.hengda.xx.xx.xx.tools 公共工具方法类，比如网络状态判断，文件路径判断等 com.hengda.xx.xx.xx.bean 各种javabean,比如网络请求实体，数据库实体等 com.hengda.xx.xx.xx.db 数据库操作类 com.hengda.xx.xx.xx.adapter 模块或公共适配器类 com.hengda.xx.xx.xx.view 自定义的view com.hengda.xx.xx.xx.service service服务 com.hengda.xx.xx.xx.broadcast 广播类 com.hengda.xx.xx.xx.listener 自定义的监听器 2 类名基本规则：大驼峰命名。 类 规则 举例 Activity类 以Activity为后缀标识 主界面：MainActivity，登录界面LoginActivity Fragment类 以Fragment为后缀标识 地图：MapFragment， 用户：UserFragment Adapter类 以Adapter为后缀标识 用户适配器：UserAdapter 公共方法类 Tools或Manager为后缀标识 线程池：ThreadPoolManager，日志工具：LogTools 数据库类 以DBHelper为后缀标识 展品数据库：ExhibitDBHelper Service类 以Service为后缀标识 收号服务：BeaconService 广播类 以Broadcast为后缀标识 通知广播：NotifyBroadcast adapter中的ViewHolder 以Holder为后缀标识 同伴列表中的PartnerHolder 实体Bean 以Model为后缀标识 用户实体 UserModel 类注释所有类，接口需要添加注释，格式如下 /** * author:作者 * time:时间 * desc:描述 */ 3 接口基本规则：大驼峰命名。监听类接口以大写字母I开头例如:INotifyListener，INotifyCallBack等点击触发类以On开头例如：OnClickListener。 4 方法基本规则：小驼峰命名，禁止拼音；注意事项 不要在函数名中描述参数，根本无意义。例如findExhibitByAutoNumAndType(int autoNum, int type) 可以简化成 findExhibit(int autoNum, int type)。 注意上下文是否已暗示主语，比如一个保存信息的方法，可以叫做saveMessage(),如果这是Message类的一个方法，就可以简化为save()。 一般情况下不要使用表达不明确的词语，比如do ,handle, perform, return 等等。 方法参数需要正确表达含义比如doSomething(String s1, String s2, String s3)应该写成doSomething(String userName, String userEmail, String userId) 。 此外，在Activity，Fragment,各种View，接口等等中请按照以下规则命名相应方法 方法 说明 initXX() 初始化相关方法,使用init为前缀标识，如初始化布局initView() getXX() 直接访问数据时,比如javabean的数据获取等，其他情况另选更精确的动词 isXX() 方法返回值为boolean型，is, are, was, were开头，或者搭配情态动词，can, could, may, might, must, shall, should, will 和 would，这些词隐含了假设当前条件为真的反问信息。比如Button.isEnabled()，User.canAccess() displayXX() 弹出提示框和提示信息，比如displayErrorToast().比如displaySucceesDialog() saveXX() 保存数据 clearXX()或removeXX() 清除数据 drawXX() 绘制图形 resetXX() 重置数据 setXX() 数据或对象直接赋值 方法注释 重要方法需要添加方法注释，最好英文，格式如下： /** * desc:描述 * @param 参数名 参数描述 * @param 参数名2 参数描述 * @return 返回值类型说明(返回 void时可不写) * @throws Exception 异常说明(可选) */ 方法內部逻辑注释 全部使用“//”形式标注，注释位于需要注释的语句上方，例如 //请求成功 if (response.succeed() == 0) { } 5 变量基本规则：小驼峰命名1 非public的、非static的字段名称以m开头，例如mXXButton,mXXListener等；2 其它字段以小写字母开头 ,例如：userName ,passWord;3 static字段名称以s开头 例如：sSingleton； 6 常量基本规则：全部大写，单词不缩写望文知意原则，下划线命名法。例如：MAX_SCREEN_WIDTH。7 资源图片基本规则：全部小写，采用下划线命名法，单词禁止出现拼音；如果图片可以为各个模块公用可不加模块名，否则需加模块名。 类型 规则 举例 按钮 btn_模块_功能_状态 或者 btn_功能_状态 btn_login_back_normal.png 或者 btn_back_normal.png 图标类 icon_模块_说明 或者 icon_说明 icon_usercenter_userheader.png 或者 icon_userheader.png 背景 bg_模块 或者 bg_说明 bg_login.png 或者 bg_white.png 图片 img_模块_说明 或者 img_说明 img_login_header.png 或者 img_header.png 带点击效果控件 btn_模块_功能_selector 或者 btn_功能_selector btn_login_back_selector.xml 或者 btn_back_selector.xml 默认图 def_模块_说明 或者 def_说明 def_usercenter_header.png 或者 def_header.png 名称 状态 _normal 默认 _pressed 按下 _focused 获取焦点 _disabled 不可点击 _checked _selected 选中 _hovered 获取光标 _checkable 可被选中 _activated 激活 _windowfocused 窗口焦点 点击效果状态命名规则(参考自android-selector-chapek使用本规则可使用android-selector-chapek插件快速生成selecter文件) 8 布局文件基本规则：全部小写，下划线命名法,单词禁止出现拼音； 名称 规则 举例 Activity activity_模块名.xml activity_register.xml Fragment fragment_模块名.xml fragment_map.xml Dialog dialog_说明.xml dialog_editname.xml List列表 listitem_说明.xml listitem_partners.xml PopupWindow ppw_说明.xml ppw_floorlist.xml 其他子布局 模块_说明_item.xml main_menu_item.xml 包含项 include_说明.xml include_header.xml 9 动画文件基本规则;全部小写，下划线命名法;10 控件Id基本规则：全部小写，下划线命名法,单词禁止出现拼音；格式：功能_控件缩写 控件 缩写 Button btn TextView tv ImageButton imgbtn ImageView img Linearlayout ll Relativelayout rl Framelayout fl EditText edt SeekBar skbar ScollView scv ListView lv ProgressBar psbar WebView wbv 10 colors.xml基本规则：全部小写，下划线命名法； 分类 规则 举例 纯色 直接色值命名 black 非纯色 模块说明主题色 login_username_light 如果APP只有单一主题可不用设置主题色 11 自定义View基本规则：大驼峰命名法，以View结尾格式：功能+View举例：TipsView； 12 Menu菜单基本规则：全部小写，下划线命名法；格式：模块_功能.xml举例：searchadd.xml因为menu文件统一放在menu文件夹下所以不需要再加menu前缀。 13 strings.xml//还没想好 参考Google Java Style 中文版Android Code StyleAndroid 开发最佳实践","categories":[{"name":"文档","slug":"文档","permalink":"http://yoursite.com/categories/文档/"}],"tags":[],"keywords":[{"name":"文档","slug":"文档","permalink":"http://yoursite.com/categories/文档/"}]},{"title":"【瓦片地图HdTileView】-白世伟","slug":"【瓦片地图HdTileView】-白世伟","date":"2017-03-22T05:13:23.000Z","updated":"2017-03-22T05:14:45.573Z","comments":true,"path":"2017/03/22/【瓦片地图HdTileView】-白世伟/","link":"","permalink":"http://yoursite.com/2017/03/22/【瓦片地图HdTileView】-白世伟/","excerpt":"","text":"HDTileView概述基于最新版本TileView，继承原有TileView，Picasso加载瓦片，封装开发中常用方法； 更新日志V0.0.3 修复onCreate函数中调用placeMarkerWithScale方法不直接显示markers问题 V0.0.2 支持加载网络瓦片 支持加载网络预缓存图片 V0.0.1 完成基础框架构建 marker增加动画效果 marker支持缩放设置 添加最小全屏模式 支持滑动效果 完成加载预缓冲图片 用法（限本地测试）导入测试资源：将resource.zip解压后拷贝到sdcard根目录下 引入插件 Gradle: compile &apos;com.hengda.frame.tileview:library:0.0.3&apos; Maven: &lt;dependency&gt; &lt;groupId&gt;com.hengda.frame.tileview&lt;/groupId&gt; &lt;artifactId&gt;library&lt;/artifactId&gt; &lt;version&gt;0.0.3&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;/dependency&gt; 使用1.Xml中；&lt;com.hengda.frame.tileview.HDTileView android:id=&quot;@+id/tileView&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;/&gt; 2.Java代码中；HDTileView mTileView=new HDTileView(this); 3 初始化配置/** * 初始化 * * @param maxScale 缩放级数 * @param width 总宽度 * @param height 总高度 * @param mapUrl 瓦片路徑 */ public void init(int maxScale, int width, int height,String mapUrl) loadMapFromHttpUseGlide();//使用Glide加载网络图片，默认开启硬盘缓存节省用户流量（推荐） loadMapFromHttpUsePicasso()//使用Picasso加载网络图片，不开启缓存，瓦片实时刷新 loadMapFromDisk()//使用picasso加载本地瓦片 到此瓦片地图已经可以正常显示。 4 加载预缓冲图片（1）从sdcard或网络加载 mTileView.addSample(uri); （2）从res中加载 public void addSample(int resId) 5 添加markermTileView.placeMarkerWithScale(int resId, double x, double y, Object tag); 或者 mTileView.placeMarkerWithScale(Bitmap bitmap, double x, double y, Object tag); 6 其他效果设置（1） /** * delay时间内滑动到指定位置并放大/缩小到指定scale * @param x * @param y * @param scale * @param delay */ public void slideToPositionWithScale(final double x, final double y, final float scale,final int delay) （2） /** * delay时间内滑动到指定位置 * @param x * @param y * @param delay */ public void slideToPosition(final double x, final double y, final int delay) （3） /** * 最小全屏模式 */ public void setMinimumScaleFullScreen()；","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}]},{"title":"【移动支付AndroidPay】-祝文飞","slug":"【移动支付AndroidPay】-祝文飞","date":"2017-03-20T11:36:45.000Z","updated":"2017-03-20T11:37:43.157Z","comments":true,"path":"2017/03/20/【移动支付AndroidPay】-祝文飞/","link":"","permalink":"http://yoursite.com/2017/03/20/【移动支付AndroidPay】-祝文飞/","excerpt":"","text":"一、概述移动支付框架，封装了微信支付、支付宝支付，两种支付方式保持了统一的使用风格，使用方便。 二、版本最新版本0.0.1，compile ‘com.hengda.zwf:AndroidPay:0.0.1’ 三、使用1、修改AndroidManifest.xml123456789&lt;activity android:name=&quot;com.hengda.zwf.androidpay.WXPayCallbackActivity&quot; android:configChanges=&quot;orientation|keyboardHidden|navigation|screenSize&quot; android:launchMode=&quot;singleTop&quot; android:theme=&quot;@android:style/Theme.Translucent.NoTitleBar&quot; /&gt;&lt;activity-alias android:name=&quot;.wxapi.WXPayEntryActivity&quot; android:exported=&quot;true&quot; android:targetActivity=&quot;com.hengda.zwf.androidpay.WXPayCallbackActivity&quot; /&gt; 2、微信支付1234567891011121314151617181920212223242526272829303132333435/** * 微信支付 * * @author 祝文飞（Tailyou） * @time 2017/3/20 10:13 */ public void doWxpay(View view) &#123; String payParam = &quot;&quot;;//pay param form server WechatPay.getInstance(this, &quot;wxff989c97f26783b1&quot;).doPay(payParam, new WechatPay.WXPayResultCallBack() &#123; @Override public void onSuccess() &#123; Toast.makeText(getApplication(), &quot;支付成功&quot;, Toast.LENGTH_SHORT).show(); &#125; @Override public void onError(int error_code) &#123; switch (error_code) &#123; case WechatPay.NO_OR_LOW_WX: Toast.makeText(getApplication(), &quot;未安装微信或微信版本过低&quot;, Toast.LENGTH_SHORT).show(); break; case WechatPay.ERROR_PAY_PARAM: Toast.makeText(getApplication(), &quot;参数错误&quot;, Toast.LENGTH_SHORT).show(); break; case WechatPay.ERROR_PAY: Toast.makeText(getApplication(), &quot;支付失败&quot;, Toast.LENGTH_SHORT).show(); break; &#125; &#125; @Override public void onCancel() &#123; Toast.makeText(getApplication(), &quot;支付取消&quot;, Toast.LENGTH_SHORT).show(); &#125; &#125;); &#125; 3、支付宝支付1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * 支付宝支付 * * @author 祝文飞（Tailyou） * @time 2017/3/20 10:13 */ public void doAlipay(View view) &#123; //pay param form server String payParam = &quot;pay param form server&quot;; Alipay.getInstance(this).doPay(payParam, new Alipay.AlipayResultCallBack() &#123; @Override public void onSuccess() &#123; Toast.makeText(getApplication(), &quot;支付成功&quot;, Toast.LENGTH_SHORT).show(); &#125; @Override public void onDealing() &#123; Toast.makeText(getApplication(), &quot;支付处理中...&quot;, Toast.LENGTH_SHORT).show(); &#125; @Override public void onError(int error_code) &#123; switch (error_code) &#123; case Alipay.ERROR_RESULT: Toast.makeText(getApplication(), &quot;支付失败:支付结果解析错误&quot;, Toast.LENGTH_SHORT).show(); break; case Alipay.ERROR_NETWORK: Toast.makeText(getApplication(), &quot;支付失败:网络连接错误&quot;, Toast.LENGTH_SHORT).show(); break; case Alipay.ERROR_PAY: Toast.makeText(getApplication(), &quot;支付错误:支付码支付失败&quot;, Toast.LENGTH_SHORT).show(); break; default: Toast.makeText(getApplication(), &quot;支付错误&quot;, Toast.LENGTH_SHORT).show(); break; &#125; &#125; @Override public void onCancel() &#123; Toast.makeText(getApplication(), &quot;支付取消&quot;, Toast.LENGTH_SHORT).show(); &#125; &#125;); &#125; 四、使用具体使用见demo。项目地址：https://git.oschina.net/tailyou/HD_Frame_AndroidPay","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}]},{"title":"【导览机项目模板】-祝文飞","slug":"【导览机项目模板】-祝文飞","date":"2017-03-17T07:20:34.000Z","updated":"2017-03-17T09:18:27.661Z","comments":true,"path":"2017/03/17/【导览机项目模板】-祝文飞/","link":"","permalink":"http://yoursite.com/2017/03/17/【导览机项目模板】-祝文飞/","excerpt":"","text":"一、概述参考GeekNews，基于RxJava2，Dagger2，Retrofit2搭建，采用MVP模式。封装了文件下载，多模收号，网络交互、数据库操作、自动更新等功能。 二、项目地址https://git.oschina.net/tailyou/Hd_Smart_Template_D 二、依赖123456789101112131415161718192021//tailyoucompile &apos;com.hengda.zwf:HttpUtil:1.0.2&apos;compile &apos;com.hengda.zwf:AutoNoUtil:1.0.1&apos;compile &apos;com.hengda.zwf:CommonUtil:1.0.1&apos;compile &apos;com.hengda.zwf:CommonAdapter:1.0.2&apos;compile &apos;com.hengda.zwf:HdDialog:0.0.6&apos;//dicompile &apos;com.google.dagger:dagger:2.9&apos;annotationProcessor &apos;com.google.dagger:dagger-compiler:2.9&apos;compile &apos;com.jakewharton:butterknife:8.5.1&apos;compile &apos;com.jakewharton:butterknife-compiler:8.5.1&apos;//othercompile &apos;com.qozix:tileview:2.2.6&apos;compile &apos;com.orhanobut:logger:1.15&apos;compile &apos;me.yokeyword:fragmentation:0.10.1&apos;compile &apos;com.tencent.bugly:crashreport:2.4.0&apos;compile &apos;com.github.bumptech.glide:glide:3.7.0&apos;compile &apos;com.github.chrisbanes:PhotoView:1.3.1&apos;compile &apos;org.greenrobot:greendao:3.2.0&apos;compile &apos;org.greenrobot:greendao-generator:3.2.0&apos;compile &apos;com.android.support:multidex:1.0.1&apos;","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"项目模板","slug":"Android/项目模板","permalink":"http://yoursite.com/categories/Android/项目模板/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"项目模板","slug":"Android/项目模板","permalink":"http://yoursite.com/categories/Android/项目模板/"}]},{"title":"【Android项目模板】-祝文飞","slug":"【Android项目模板】-祝文飞","date":"2017-03-17T07:20:25.000Z","updated":"2017-03-17T09:18:31.677Z","comments":true,"path":"2017/03/17/【Android项目模板】-祝文飞/","link":"","permalink":"http://yoursite.com/2017/03/17/【Android项目模板】-祝文飞/","excerpt":"","text":"一、概述参考GeekNews，基于RxJava2，Dagger2，Retrofit2搭建，采用MVP模式。封装了文件下载，多模收号，网络交互、数据库操作、自动更新等功能，集成了腾讯Bugly，内存泄漏检测、过度绘制检测。 二、项目地址https://git.oschina.net/tailyou/Hd_Smart_Template 二、依赖12345678910111213141516171819202122232425262728//tailyoucompile &apos;com.hengda.zwf:HttpUtil:1.0.2&apos;compile &apos;com.hengda.zwf:AutoNoUtil:1.0.2&apos;compile &apos;com.hengda.zwf:CommonUtil:1.0.1&apos;compile &apos;com.hengda.zwf:CommonAdapter:1.0.2&apos;compile &apos;com.hengda.zwf:HdDialog:0.0.6&apos;//dicompile &apos;com.google.dagger:dagger:2.9&apos;annotationProcessor &apos;com.google.dagger:dagger-compiler:2.9&apos;compile &apos;com.jakewharton:butterknife:8.5.1&apos;compile &apos;com.jakewharton:butterknife-compiler:8.5.1&apos;//canarycompile &apos;com.squareup.leakcanary:leakcanary-android:1.5&apos;compile &apos;com.squareup.leakcanary:leakcanary-android-no-op:1.5&apos;compile &apos;com.github.markzhai:blockcanary-android:1.4.1&apos;compile &apos;com.github.markzhai:blockcanary-no-op:1.4.1&apos;//othercompile &apos;com.qozix:tileview:2.2.6&apos;compile &apos;com.orhanobut:logger:1.15&apos;compile &apos;me.yokeyword:fragmentation:0.10.1&apos;compile &apos;com.tencent.bugly:crashreport:2.4.0&apos;compile &apos;com.github.bumptech.glide:glide:3.7.0&apos;compile &apos;com.github.chrisbanes:PhotoView:1.3.1&apos;compile &apos;org.greenrobot:greendao:3.2.0&apos;compile &apos;org.greenrobot:greendao-generator:3.2.0&apos;compile &apos;com.github.hotchemi:permissionsdispatcher:2.3.1&apos;compile &apos;com.android.support:multidex:1.0.1&apos;annotationProcessor &apos;com.github.hotchemi:permissionsdispatcher-processor:2.3.1&apos;","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"项目模板","slug":"Android/项目模板","permalink":"http://yoursite.com/categories/Android/项目模板/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"项目模板","slug":"Android/项目模板","permalink":"http://yoursite.com/categories/Android/项目模板/"}]},{"title":"【文件下载FileLoader】-白世伟","slug":"【文件下载FileLoader】-白世伟","date":"2017-03-17T00:16:15.000Z","updated":"2017-03-17T07:53:35.282Z","comments":true,"path":"2017/03/17/【文件下载FileLoader】-白世伟/","link":"","permalink":"http://yoursite.com/2017/03/17/【文件下载FileLoader】-白世伟/","excerpt":"","text":"HDFileLoader-文件下载框架概述基于OKHttp3开发，自带服务器和本地资源文件的同步更新。具体使用方式详见Samples 更新日志V0.0.1 完成基础框架构建 增加资源同步更新 用法引入插件 Gradle: 暂无 Maven: 暂无 使用1.在Application.onCreate中初始化全局配置；OkHttpClient okHttpClient = new OkHttpClient.Builder() connectTimeout(10000L, TimeUnit.MILLISECONDS) readTimeout(10000L, TimeUnit.MILLISECONDS) addInterceptor(new LoggerInterceptor(&quot;TAG&quot;)) build(); HDFileLoader.initClient(getApplicationContext(),okHttpClient); 注意:addInterceptor(new LoggerInterceptor(“TAG”))用于输出debug调试信息，如果不需要可以去掉。 FileLoader有两种使用方式，一种是自带下载框，一种是基础版下载框架,需要自定义下载框；2 使用自带下载框的方式(1)在Presenter，Fragment或Activity中实现DownloadCallBackListener接口，并实现以下三个回调方法 @Override public void completed(File file) { //下载完成后回调此方法，返回下载文件，可通过file.getAbsolutePath()获取绝对路径; } @Override public void justPlay(String fileDir) { //此方法回调分两种方式 //1，若果没有开启检查更新功能则判断本地文件是否存在，存在则回调； //2，如果开启了检查更新功能，如果下载文件不需要更新则回调； } @Override public void error(Exception e) { //下载失败回调，例如没有网络，连接超时，找不到下载地址（404），无法访问存储路径等等。 } （2）开始下载 Downloader.Builder.create(MainActivity.this) .url(url)//下载地址 .src(basicPath + &quot;0002/0002.aac&quot;)//源资源路径（例如播放路徑） .des(basicPath)//下载保存路径 .name(&quot;0002.zip&quot;)//保存的文件名 .title(&quot;正在下载&quot;)//下载框标题 .ckeck(true)//是否自动检查更新，默认false .unzip(true)//是否需要解压缩，默认true .listener(MainActivity.this)//回调监听 .showCancel(true)//是否显示取消按钮，默认false .build() .start();//开始下载 3.使用基础版下载框架（1）创建一个RequestCall RequestCall call = HDFileLoader.get().url(url).build(); url为资源下载地址。（2）创建FileCallBack回调，监听下载中的各种状态 callBack=new FileCallBack(mSrc, mDes, mName, mCheck) { @Override public void connected(long total, int id) { //进行一些初始化的操作 } @Override public void inProgress(float progress, long total, int id) { //下载进度回调，progress为已完成百分比，total为总长； } @Override public void completed(File file, int id) { //下载完成时回调，可以在这里解压缩及后续操作 } @Override public void justPlay(String destFileDir) { //回调同带下载框方式一样 } @Override public void onError(Call call, Exception e, int id) { //下载失败回调，例如没有网络，连接超时，找不到下载地址（404），无法访问存储路径等等。 } }; FileCallBack需要传入四个参数： 源资源路径（例如播放路徑）； 下载路径。板锉 保存的文件名 是否启用检查更新 4.开始下载call.execute(callBack); 5.取消下载call.cancel();","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}]},{"title":"【移动支付MobilePay】-常文达","slug":"【移动支付MobilePay】-常文达","date":"2017-03-17T00:15:34.000Z","updated":"2017-03-17T06:31:52.213Z","comments":true,"path":"2017/03/17/【移动支付MobilePay】-常文达/","link":"","permalink":"http://yoursite.com/2017/03/17/【移动支付MobilePay】-常文达/","excerpt":"","text":"一、概述支付宝和微信支付 二、引入方法dependencies { compile ‘com.wenda.pay:wd_pay:0.0.8’} 三、使用支付宝支付123456789AliPayReq aliPayReq = new AliPayReq.Builder() .with(MainActivity.this) .setOrderInfo(OrderInfo) //OrderInfo为订单详情，服务器拼好的 .create() PayAPI.getInstance().sendPayRequest(aliPayReq);//调起支付//关于支付宝支付的回调//aliPayReq.setOnAliPayListener(new OnAliPayListener); 回调说明12345678910111213141516.setOnAliPayListener(new AliPayReq.OnAliPayListener() &#123; @Override public void onPaySuccess(String resultInfo) &#123; Toast.makeText(MainActivity.this,&quot;支付成功&quot;,Toast.LENGTH_LONG).show(); &#125; @Override public void onPayFailure(String resultInfo) &#123;//包括用户主动取消支付，或者系统返回的错误 Toast.makeText(MainActivity.this,&quot;支付失败&quot;,Toast.LENGTH_LONG).show(); &#125; @Override public void onPayConfirmimg(String resultInfo) &#123;//代表支付结果因为支付渠道原因或者系统原因还在等待支付结果确认，最终交易是否成功以服务端异步通知为准（小概率状态） Toast.makeText(MainActivity.this,&quot;支付失败&quot;,Toast.LENGTH_LONG).show(); &#125; &#125;); 微信支付12345678910111213WechatPayReq wechatPayReq = new WechatPayReq.Builder() .with(MainActivity.this) //activity实例 .setAppId(&quot;AppId&quot;) //微信支付AppID .setPartnerId(&quot;PartnerId&quot;)//微信支付商户号 .setPrepayId(&quot;PrepayId&quot;)//预支付码 .setNonceStr(&quot;NonceStr&quot;) .setTimeStamp(&quot;TimeStamp&quot;)//时间戳 .setSign(&quot;Sign&quot;)//签名 .create(); PayAPI.getInstance().sendPayRequest(wechatPayReq);//调起支付 //关于微信支付的回调 要在支付前调用 wechatPayReq.init(getApplicationContext(), &quot;AppId&quot;); WechatPayReq.getInstance().setWXPayResultCallBack(); 回调说明12345678910111213141516WechatPayReq.getInstance().setWXPayResultCallBack(new WechatPayReq.WXPayResultCallBack() &#123; @Override public void onSuccess() &#123; Toast.makeText(MainActivity.this,&quot;支付成功&quot;,Toast.LENGTH_LONG).show(); &#125; @Override public void onError(int error_code) &#123;//错误 可能的原因：签名错误、未注册APPID、项目设置APPID不正确、注册的APPID与设置的不匹配、其他异常等 Toast.makeText(MainActivity.this,&quot;支付失败&quot;,Toast.LENGTH_LONG).show(); &#125; @Override public void onCancel() &#123;// 用户取消 无需处理。发生场景：用户不支付了，点击取消，返回APP。 Toast.makeText(MainActivity.this,&quot;支付失败&quot;,Toast.LENGTH_LONG).show(); &#125; &#125;); 微信支付需增加的权限12345678910&lt;activity android:name=&quot;com.wenda.pay.WXPayCallbackActivity&quot; android:configChanges=&quot;orientation|keyboardHidden|navigation|screenSize&quot; android:launchMode=&quot;singleTop&quot; android:theme=&quot;@android:style/Theme.Translucent.NoTitleBar&quot; /&gt; &lt;activity-alias android:name=&quot;.wxapi.WXPayEntryActivity&quot; android:exported=&quot;true&quot; android:targetActivity=&quot;com.wenda.pay.WXPayCallbackActivity&quot; /&gt; 混淆 1234567891011121314151617#wechat pay-dontwarn com.tencent.**-keep class com.tencent.** &#123;*;&#125;#alipay-dontwarn com.alipay.**-keep class com.alipay.** &#123;*;&#125;-dontwarn com.ta.utdid2.**-keep class com.ta.utdid2.** &#123;*;&#125;-dontwarn com.ut.device.**-keep class com.ut.device.** &#123;*;&#125;-dontwarn org.json.alipay.**-keep class corg.json.alipay.** &#123;*;&#125; 注意###微信支付微信支付必须是正式的签名包和正确的包名才能调起。 微信支付https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_5 支付宝支付https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.1wPnBT&amp;treeId=204&amp;articleId=106079&amp;docType=1 demo里的数据是测试数据，都是已支付过的所以不能支付成功","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}]},{"title":"【提示弹框HdDialog】-祝文飞","slug":"【提示弹框HdDialog】-祝文飞","date":"2017-03-17T00:14:05.000Z","updated":"2017-03-18T00:22:18.517Z","comments":true,"path":"2017/03/17/【提示弹框HdDialog】-祝文飞/","link":"","permalink":"http://yoursite.com/2017/03/17/【提示弹框HdDialog】-祝文飞/","excerpt":"","text":"一、概述通用Dialog，适用于ProgressDialog，BuilderDialog，可以设置字体、进入退出动画，同时兼容手机和导览机。 二、版本最新版本0.0.6，直接在gradle中添加即可。compile ‘com.hengda.zwf:HdDialog:0.0.6’ 三、效果1、ProgressDialog补间动画 2、ProgressDialog帧动画 3、BuilderDialog默认布局 4、BuilderDialog自定义布局 四、使用此处以BuilderDialog自定义布局为例，简单介绍说使用，具体用法参见demo。地址：https://git.oschina.net/tailyou/HD_Frame_CommonDialog 1234567891011121314151617181920212223242526/** * 该方法通过提取文字参数和点击事件可以继续封装 * * @author 祝文飞（Tailyou） * @time 2017/2/6 9:37 */private void showCustomDlg() &#123; HDialogBuilder hDialogBuilder = new HDialogBuilder(mContext); View customView = View.inflate(mContext, R.layout.dialog_custom_view_all, null); TextView tvTitle = HdTool.getView(customView, R.id.tvTitle); TextView tvMsg = HdTool.getView(customView, R.id.tvMsg); TextView btnYes = HdTool.getView(customView, R.id.btnYes); TextView btnNo = HdTool.getView(customView, R.id.btnNo); tvTitle.setText(&quot;注销&quot;); tvMsg.setText(&quot;退出账号可能会使连续登录记录归零，确定退出？&quot;); btnYes.setText(&quot;确定退出&quot;); btnNo.setText(&quot;取消&quot;); btnYes.setOnClickListener(v -&gt; hDialogBuilder.dismiss()); btnNo.setOnClickListener(v -&gt; hDialogBuilder.dismiss()); hDialogBuilder.setCustomView(customView) .dlgColor(Color.TRANSPARENT) .cancelable(false) .show();&#125; 封装后:123456789101112131415161718192021private void showCustomDlg(String title, String msg, String txtYes, String txtNo, DialogClickListener dialogClickListener) &#123; hDialogBuilder = new HDialogBuilder(mContext); View customView = View.inflate(mContext, R.layout.dialog_custom_view_all, null); TextView tvTitle = HdTool.getView(customView, R.id.tvTitle); TextView tvMsg = HdTool.getView(customView, R.id.tvMsg); TextView btnYes = HdTool.getView(customView, R.id.btnYes); TextView btnNo = HdTool.getView(customView, R.id.btnNo); tvTitle.setText(title); tvMsg.setText(msg); btnYes.setText(txtYes); btnNo.setText(txtNo); btnYes.setOnClickListener(v -&gt; dialogClickListener.p()); btnNo.setOnClickListener(v -&gt; dialogClickListener.n()); hDialogBuilder.setCustomView(customView) .dlgColor(Color.TRANSPARENT) .cancelable(false) .show();&#125; 封装好之后，可以写到工具类中供直接调用.1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/** * 作者：Tailyou （祝文飞） * 时间：2016/5/26 19:03 * 邮箱：tailyou@163.com * 描述：Dialog工具类 */public class DialogCenter &#123; private static HDialogBuilder hDialogBuilder; /** * 封装好的方法可以写到DialogCenter工具类中，供直接调用 * * @author 祝文飞（Tailyou） * @time 2017/2/6 9:39 */ public static void showCustomDlg(Context mContext, String title, String msg, String txtYes, String txtNo, DialogClickListener dialogClickListener) &#123; hideDialog(); hDialogBuilder = new HDialogBuilder(mContext); View customView = View.inflate(mContext, R.layout.dialog_custom_view_all, null); TextView tvTitle = HdTool.getView(customView, R.id.tvTitle); TextView tvMsg = HdTool.getView(customView, R.id.tvMsg); TextView btnYes = HdTool.getView(customView, R.id.btnYes); TextView btnNo = HdTool.getView(customView, R.id.btnNo); tvTitle.setText(title); tvMsg.setText(msg); btnYes.setText(txtYes); btnNo.setText(txtNo); btnYes.setOnClickListener(v -&gt; dialogClickListener.p()); btnNo.setOnClickListener(v -&gt; dialogClickListener.n()); hDialogBuilder.setCustomView(customView) .dlgColor(Color.TRANSPARENT) .cancelable(false) .show(); &#125; /** * 隐藏Dialog */ public static void hideDialog() &#123; if (hDialogBuilder != null) &#123; hDialogBuilder.dismiss(); hDialogBuilder = null; &#125; &#125;&#125;","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}]},{"title":"【数据适配器CommonAdapter】-祝文飞","slug":"【数据适配器CommonAdapter】-祝文飞","date":"2017-03-17T00:13:19.000Z","updated":"2017-03-18T00:22:50.028Z","comments":true,"path":"2017/03/17/【数据适配器CommonAdapter】-祝文飞/","link":"","permalink":"http://yoursite.com/2017/03/17/【数据适配器CommonAdapter】-祝文飞/","excerpt":"","text":"一、概述通用Adapter，适用于单布局ListView、多布局ListView、单布局RecyclerView，多布局RecyclerView，带章节标题RecyclerView，GridView与ViewPage结合使用等情况。 二、版本最新版本1.0.2，直接在gradle中添加即可。compile ‘com.hengda.zwf:CommonAdapter:1.0.2’ 三、效果1、单布局ListView 2、多布局ListView 3、单布局RecyclerView 4、多布局RecyclerView 5、章节标题RecyclerView 6、GridView结合ViewPage 四、使用具体用法见demo。地址：https://git.oschina.net/tailyou/HD_Frame_CommonAdapter","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}]},{"title":"【多模收号AutoNoUtil】-祝文飞","slug":"【多模收号AutoNoUtil】-祝文飞","date":"2017-03-17T00:11:30.000Z","updated":"2017-03-17T08:54:22.355Z","comments":true,"path":"2017/03/17/【多模收号AutoNoUtil】-祝文飞/","link":"","permalink":"http://yoursite.com/2017/03/17/【多模收号AutoNoUtil】-祝文飞/","excerpt":"","text":"一、概述多模收号模块，包含rfid，ble，wifi三种收号方式。 二、版本最新版本1.0.2，compile ‘com.hengda.zwf:AutoNoUtil:1.0.2’ 三、gradle依赖无 四、思路1、BLE收号思路 1、启动蓝牙收号后，将后台扫描得到的 BluetoothDevice device, int rssi, byte[] scanRecord 解析成Beacon； 2、以回调接口的形式，在收号服务中处理解析得到的Beacon，根据一定条件进行过滤，将符合条件的Beacon加入List； 3、每隔一定时间间隔从List中取AutoNo，取的原则是：按平均rssi排序，较大为优 2、WiFi收号思路 1、启动WiFi收号后，通过RxBus发送后台扫描得到的 ScanResult； 2、在收号服务中接收 ScanResult，根据一定条件过滤，将符合条件的 ScanResult 加入List； 3、每个一定时间间隔从List中取AutoNo，取的原则是：按平均 level 排序，较大为优 3、Rfid收号思路 1、Rfid收号只有导览机使用，接收设备底层上传的数据并解析得到多模号； 2、SerialPort及所在的包名不能修改。 四、使用具体使用见demo。地址：https://git.oschina.net/tailyou/HD_Frame_AutoNoReceiver","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"Model","slug":"Android/Model","permalink":"http://yoursite.com/categories/Android/Model/"}]}]}